import mongoose from "mongoose";
import DataModel from "../models/datas.js";

const parseTimer = (timerStr) => {
  const [days, hours, minutes, seconds] = timerStr.split(":").map(Number);
  return days * 86400 + hours * 3600 + minutes * 60 + seconds; // –≤ —Å–µ–∫—É–Ω–¥—ã
};

const formatTimer = (seconds) => {
  const d = Math.floor(seconds / 86400);
  const h = Math.floor((seconds % 86400) / 3600);
  const m = Math.floor((seconds % 3600) / 60);
  const s = seconds % 60;
  return `${String(d).padStart(2, "0")}:${String(h).padStart(2, "0")}:${String(
    m
  ).padStart(2, "0")}:${String(s).padStart(2, "0")}`;
};

export const startTimerUpdate = () => {
  console.log("üöÄ startTimerUpdate –∑–∞–ø—É—â–µ–Ω");

  setInterval(async () => {
    try {
      console.log("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞...");
      const dataEntries = await DataModel.find();
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${dataEntries.length}`);

      for (const entry of dataEntries) {
        console.log(`‚è≥ –¢–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä [${entry._id}]: ${entry.timer}`);
        const currentSeconds = parseTimer(entry.timer);

        if (currentSeconds > 0) {
          const newTimer = formatTimer(currentSeconds - 1);
          console.log(`üïí –ù–æ–≤—ã–π —Ç–∞–π–º–µ—Ä: ${newTimer}`);

          const updateResult = await DataModel.updateOne(
            { _id: new mongoose.Types.ObjectId(entry._id) }, // ‚úÖ –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ _id –∫ ObjectId
            { $set: { timer: newTimer } } // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º $set –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          );

          console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${JSON.stringify(updateResult)}`);
        }
      }
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤ startTimerUpdate:", err);
    }
  }, 1000);
};
